package com.dao;

import com.model.EmployeeDayRecord;
import com.service.EveningCompensationService;
import com.util.GenerateListFromCsv;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Repository;

import java.util.List;

import static com.util.Constants.SEPERATOR;
import static com.util.Constants.TIME_SEPERATOR;

@Repository
public class EmployeeLogDao {

    private static final Log LOG = LogFactory.getLog(EmployeeLogDao.class);
    /**
     * Employee records list generated by reading the csv file.
     */
    private List<EmployeeDayRecord> employeeLogList;

    /**
     * Returns the list of employee records from the CSV file.
     *
     * @return List<EmployeeDayRecord>
     */
    public List<EmployeeDayRecord> getEmployeeTimeLogList(final String csvFileName) {
        employeeLogList = GenerateListFromCsv.generateListFromCsv(EmployeeDayRecord.class, csvFileName);
        for (EmployeeDayRecord employeeDailyTimeLog : employeeLogList) {
            setShiftStartDateTime(employeeDailyTimeLog);
            setShiftEndDateTime(employeeDailyTimeLog);
        }
        LOG.debug("Records count read from the CSV file" + employeeLogList.size());
        return employeeLogList;
    }

    /**
     * Generate effective time for the employee shift start time by combining date and start time.
     * Done to populate the shiftStartDateTime field.
     *
     * @param employeeDailyLog
     */
    private void setShiftStartDateTime(final EmployeeDayRecord employeeDailyLog) {
        DateTime startDateTime = new DateTime(employeeDailyLog.getDate());
        String[] startTimeString = employeeDailyLog.getStartTime().split(TIME_SEPERATOR);
        startDateTime = startDateTime.withHourOfDay(Integer.parseInt(startTimeString[0])).
                withMinuteOfHour(Integer.parseInt(startTimeString[1]));
        employeeDailyLog.setShiftStartDateTime(startDateTime);
    }

    /**
     * Generate effective time for the employee shift end time by combining date and end time.
     * Done to populate shiftEndDateTime field.
     *
     * @param employeeDailyLog
     */
    private void setShiftEndDateTime(final EmployeeDayRecord employeeDailyLog) {
        DateTime endDateTime = new DateTime(employeeDailyLog.getDate());
        String[] endTimeString = employeeDailyLog.getEndTime().split(TIME_SEPERATOR);
        endDateTime = endDateTime.withHourOfDay(Integer.parseInt(endTimeString[0])).
                withMinuteOfHour(Integer.parseInt(endTimeString[1]));
        if (endDateTime.isBefore(employeeDailyLog.getShiftStartDateTime())) {
            endDateTime.plusDays(1);
        }
        employeeDailyLog.setShiftEndDateTime(endDateTime);
    }
}
